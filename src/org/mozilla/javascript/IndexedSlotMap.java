package org.mozilla.javascript;

import java.util.Iterator;
import java.util.LinkedHashMap;

/**
 * This class supports a map of properties indexex by the PropertyMap class, which allows classes
 * with the same "shape" to put properties with the same name in the same slot, resulting in
 * potential optimizations for property access. When the property map reaches a certain size, it
 * switches to a regular hash map for access and collision resistance.
 */
public class IndexedSlotMap implements SlotMap {
    /** The number of slots to index using the property map. */
    static final int FAST_SLOT_SIZE = 10;

    private final Slot[] fastSlots = new Slot[FAST_SLOT_SIZE];
    private int fastSize = 0;
    private final LinkedHashMap<Object, Slot> slots = new LinkedHashMap<>();
    private PropertyMap propertyMap = PropertyMap.ROOT;

    public static final class FastKeyImpl implements SlotMap.FastKey {
        PropertyMap map;
        int index;

        FastKeyImpl(PropertyMap map, int index) {
            this.map = map;
            this.index = index;
        }
    }

    @Override
    public int size() {
        return slots.size();
    }

    @Override
    public boolean isEmpty() {
        return slots.isEmpty();
    }

    @Override
    public boolean isTooBig() {
        return false;
    }

    @Override
    public Slot query(Object k, int index) {
        return slots.get(makeKey(k, index));
    }

    /**
     * This implementation of getFastKey will always return a key for properties up to the size of
     * the fast property map.
     */
    @Override
    public FastKey getFastKey(Object k, int index) {
        Object key = makeKey(k, index);
        int ix = getFastSlot(key);
        if (ix >= 0) {
            return new FastKeyImpl(propertyMap, ix);
        }
        return null;
    }

    /**
     * This implementation will return true for keys that were generated by getFastKey on objects
     * with the same property map.
     */
    @Override
    public boolean isFastKeyValid(FastKey k) {
        if (k instanceof FastKeyImpl) {
            FastKeyImpl key = (FastKeyImpl) k;
            return (key.map == propertyMap && key.index < fastSize);
        }
        return false;
    }

    /**
     * This implementation will return the slot if and only if isFastKeyValid was previously called
     * and the object has not been modified since.
     */
    @Override
    public Slot queryFastNoCheck(FastKey k) {
        FastKeyImpl key = (FastKeyImpl) k;
        assert key.map == propertyMap;
        assert key.index < fastSize;
        return fastSlots[key.index];
    }

    /**
     * When inserting a new key, this implementation will move to a new property map that includes
     * the new key, and when the size of the fast keys has been exhausted, will switch to a HashMap
     * based implementation.
     *
     * <p>This works better for large objects, since it is not always the case that we mostly access
     * older properties of larger objects more often, and checking both maps results in twice the
     * cost.
     */
    @Override
    public Slot modify(Object k, int index, int attributes) {
        Object key = makeKey(k, index);
        return slots.computeIfAbsent(
                key,
                kk -> {
                    int indexOrHash = (kk != null ? kk.hashCode() : index);
                    Slot slot = new Slot(kk, indexOrHash, attributes);
                    addFastSlot(kk, slot);
                    return slot;
                });
    }

    @Override
    public void replace(Slot oldSlot, Slot newSlot) {
        Object key = makeKey(oldSlot.name, oldSlot.indexOrHash);
        slots.put(key, newSlot);
        int ix = getFastSlot(key);
        if (ix >= 0) {
            assert ix < fastSize;
            fastSlots[ix] = newSlot;
        }
    }

    @Override
    public void add(Slot newSlot) {
        Object key = makeKey(newSlot.name, newSlot.indexOrHash);
        slots.put(key, newSlot);
        addFastSlot(key, newSlot);
    }

    /**
     * This implementation of remove always switches us to a HashMap implementation, because it is
     * too complicated otherwise. This works because property removal is fairly uncommon.
     */
    @Override
    public void remove(Object k, int index) {
        Object key = makeKey(k, index);
        // Fast slots are incompatible with removals
        fastSize = 0;
        propertyMap = null;
        slots.remove(key);
    }

    @Override
    public Iterator<Slot> iterator() {
        return slots.values().iterator();
    }

    private int getFastSlot(Object key) {
        // TODO temporarily disabled
        /*
        if (fastSize > 0) {
            // Find the property in the fast map and construct a key
            int ix = propertyMap.find(key);
            if (ix >= 0) {
                assert (ix < fastSize);
                return ix;
            }
        }
        */
        return -1;
    }

    private void addFastSlot(Object key, Slot slot) {
        if (propertyMap != null && fastSize < FAST_SLOT_SIZE) {
            // We have room in the map, so switch to a new
            // property map that includes the new key.
            propertyMap = propertyMap.add(key);
            fastSlots[fastSize] = slot;
            fastSize++;
            assert (fastSize == propertyMap.getLevel() + 1);
        }
    }

    private Object makeKey(Object key, int index) {
        if (key == null) {
            return index;
        }
        return key;
    }
}
